(() => {
  // <stdin>
  console.log("This site was generated by Hugo.");
  document.addEventListener("DOMContentLoaded", function() {
    const loaderOverlay = document.getElementById("loader-overlay");
    setTimeout(() => {
      loaderOverlay.style.opacity = "0";
      loaderOverlay.style.pointerEvents = "none";
    }, 2500);
  });
  document.addEventListener("scroll", function() {
    const navbar = document.querySelector(".navbar");
    if (window.scrollY > 50) {
      navbar.classList.add("scrolled");
    } else {
      navbar.classList.remove("scrolled");
    }
  });
  document.addEventListener("click", (event) => {
    const navbar = document.querySelector(".navbar");
    const navbarToggler = document.querySelector(".navbar-toggler");
    const navbarCollapse = document.querySelector("#navbarContent");
    if (navbar && !navbar.contains(event.target)) {
      if (navbarToggler.classList.contains("collapsed") === false) {
        navbarToggler.classList.add("collapsed");
      }
      const bsCollapse = bootstrap.Collapse.getInstance(navbarCollapse);
      if (bsCollapse && navbarCollapse.classList.contains("show")) {
        bsCollapse.hide();
      }
    }
  });
  document.querySelectorAll(".dropdown-toggle").forEach((dropdownToggle) => {
    dropdownToggle.addEventListener("click", function() {
      const openDropdowns = document.querySelectorAll(".dropdown.show");
      openDropdowns.forEach((dropdown) => {
        if (dropdown !== this.parentElement) {
          dropdown.classList.remove("show");
          const menu = dropdown.querySelector(".dropdown-menu");
          menu.classList.remove("show");
        }
      });
    });
  });
  document.addEventListener("DOMContentLoaded", function() {
    document.body.classList.add("scroll-locked");
    const slider = document.querySelector(".immersive-slider");
    const slides = document.querySelectorAll(".slide");
    const dots = document.querySelectorAll(".slider-indicators .dot");
    let currentIndex = 0;
    let isScrolling = false;
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const updateSlide = (index) => {
      slides.forEach((slide, i) => {
        slide.classList.toggle("active", i === index);
      });
      dots.forEach((dot, i) => {
        dot.classList.toggle("active", i === index);
      });
    };
    const lockScroll = (event) => {
      event.preventDefault();
      event.stopPropagation();
    };
    if (isMobile) {
      const autoSlideInterval = setInterval(() => {
        if (currentIndex < slides.length - 1) {
          currentIndex++;
          updateSlide(currentIndex);
        } else {
          clearInterval(autoSlideInterval);
          document.body.classList.remove("scroll-locked");
        }
      }, 3e3);
      dots.forEach((dot, i) => {
        dot.addEventListener("click", () => {
          clearInterval(autoSlideInterval);
          currentIndex = i;
          updateSlide(currentIndex);
        });
      });
      let touchStartX = 0;
      slider.addEventListener("touchstart", (e) => {
        touchStartX = e.touches[0].clientX;
      });
      slider.addEventListener("touchend", (e) => {
        const touchEndX = e.changedTouches[0].clientX;
        const deltaX = touchEndX - touchStartX;
        if (deltaX > 50 && currentIndex > 0) {
          clearInterval(autoSlideInterval);
          currentIndex--;
          updateSlide(currentIndex);
        } else if (deltaX < -50 && currentIndex < slides.length - 1) {
          clearInterval(autoSlideInterval);
          currentIndex++;
          updateSlide(currentIndex);
        }
      });
    } else {
      const onScroll = (event) => {
        const delta = event.deltaY || event.detail || event.wheelDelta;
        if (isScrolling) return;
        if (delta > 0 && currentIndex < slides.length - 1) {
          currentIndex++;
        } else if (delta < 0 && currentIndex > 0) {
          currentIndex--;
        } else if (delta > 0 && currentIndex === slides.length - 1) {
          document.body.classList.remove("scroll-locked");
          document.removeEventListener("wheel", lockScroll, { passive: false });
        }
        updateSlide(currentIndex);
        isScrolling = true;
        setTimeout(() => {
          isScrolling = false;
        }, 800);
      };
      document.addEventListener("wheel", lockScroll, { passive: false });
      document.addEventListener("wheel", onScroll, { passive: true });
      setTimeout(() => {
        document.removeEventListener("wheel", lockScroll, { passive: false });
      }, slides.length * 1e3);
    }
    updateSlide(currentIndex);
  });
})();
